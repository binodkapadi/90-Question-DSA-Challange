
SOLUTION OF THE ABOVE PROBLEM (CODE) :(MOST FREQUENTLY ASKED QUESTION)

APPROACH 1 ==>>

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i=0;i<nums.size()-1;i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        return ans;
    }
};


APPROACH 2 ==>>

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numMap;
        int n = nums.size();
        
        for(int i = 0; i < n; i++){
            int complement = target - nums[i];
            
            if(numMap.find(complement) != numMap.end()){
                return {numMap[complement], i};
            }
            
            numMap[nums[i]] = i;
        }
        
        return {};
    }
};
