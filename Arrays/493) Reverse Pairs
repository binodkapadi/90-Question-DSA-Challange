SOLUTION ==>

class Solution {
public:
    int reversePairs(vector<int>& nums) {
         function<int(int, int)> mergeSort = [&](int left, int right) -> int {
            if (left >= right) return 0;

            int mid = left + (right - left) / 2;
            int count = mergeSort(left, mid) + mergeSort(mid + 1, right);

            // Count reverse pairs
            int j = mid + 1;
            for (int i = left; i <= mid; i++) {
                while (j <= right && (long long)nums[i] > 2LL * nums[j])
                    j++;
                count += (j - (mid + 1));
            }

            // Merge two sorted halves
            vector<int> temp;
            int i = left; 
            j = mid + 1;
            while (i <= mid && j <= right) {
                if (nums[i] <= nums[j]) temp.push_back(nums[i++]);
                else temp.push_back(nums[j++]);
            }
            while (i <= mid) temp.push_back(nums[i++]);
            while (j <= right) temp.push_back(nums[j++]);

            for (int k = left; k <= right; k++)
                nums[k] = temp[k - left];

            return count;
        };
        return mergeSort(0, nums.size() - 1);    
    }
};
